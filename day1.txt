

	Java Programming language

			- with Vishhal


	spoken language

			Language
			|
	---------------------------------
	|	|	|	|	
     listen   speaking reading writing
	|	 |	   |	|	
	concepts concepts  code	code


		Java - 1994 
		Today - 2023


Day 1
------

	Introduction to Java
	Features of Java
	Your First Java code
	Compiling the code
	Running the Code
	Simple Classes and Object



			Java Technology
				|
		---------------------------------
		|		|		|
		JSE*E		JEE		JME
		Core Java	Enterprise	Micro
		|		|		|
		Desktop		Distributed	Hand held 
		Application	Application	devices
		calculator	currency 	mobiles/laptops
				converter	palmtops
						- Android

	Java Standard Edition
	
	Java Features
	--------------
	1. Simple 
		no need to know the h/w (hardware details) 
		no pointers 
		no memory management

	2. WORA
		- write once run anywhere
		platform neutral

	3. Multithreaded

		
	4. Robust
		- excpetion handling - ability to handle runtime errors
		- automatic garbage collection

	5. Distributed
		- write programs for the network
			programA on  machine1
			other programB on another machine2

			and programA and programB can communicate
			with each other over the network

	6. Object Oriented
		KEY FEATURE
		(all our 60 hours are around this feature)

		What is an object?

		
		Object = physical state + behaviour
			 ( data )       + functionality


		cat  = color, age   +  sleeping()
			weight		snoozing()
			breed		drinkMilk()
					chaseMice()



		account = ac_type, ac_no + withdraw()
			  ac_balance	   deposit()
			  ac_holder_name   transfer()
			  acholder_phone   getbalance()
			  		   printStatement()




		


	1 listening + 2 speaking (chatting)

	3 read the code
	
	4 write the code


Your First Java Code
----------------------

the code name can be any name
extension would be .java

The fundamental unit of JAVA programming is a class







STEP I : write your code

First.java
-----------
1 public class First
2 { 
3	public static void main(String args[])
4	{
5		System.out.println("Hello everyone");
6	}  
7 } 

line number 3 is a ready made line known to JAVA

STEP II : compile your code

	javac First.java
	|
	it will generate one code known as
	|
	First.class

STEP III : run your code

	java First













public means available to the whole world / internet








	In general life

	Titles
   =>	day	date		subject		time
	---------------------------------------------
	Monday  1-Jan-2003	Maths		10:00am
	Tuesday 2-Jan-2003	History		10:00am
	..
	..
	..
	..

	computer term

	structure ExamTimeTable
	{
		day
		date
		subject
		time
	}

	structure Fruit
	{
		color
		type
		weight
		cost
	}

	class Cat
	{
		color
		age
		breed
		weight
		hungryOrNot
			chaseMice() 
			{
 
			}
			drinkMilk() 
			{
 
			}
			snooze()
			{

			}
			
	}



























	

















	  






	new job = new salary
	new thril = excitement





			





	What is a class?		What is an object?
	|				|
	blueprint of the house		actual house1
					another house2
					third house3
					...
					..as many you want

	design of your object		instance of the class

	class Car
	{
	   numberPlate
	   color
	   cost
	   numberOfSeats
	   engineCC
	   fuelType

		drive() { }
		reverseDrive() { }
		changeGear() { }
		accelerate() { }
		turnRight() { }
		turnLeft() { }
		lockDoor() { }
		unLockDoor() { }
	}

				Car myCarObj1 = new Car();
				Car myCarObj2 = new Car();		
				Car myCarObj3 = new Car();

	blue print of a car		actual car in the memory



Day 2
---------

	1. data types
	2. four types of basic functions
	
	3. integrate data types + these functions together
	using a class

	4. constructor function - prime

	

		Java Data Types
			|
	-----------------------------------
	|	|	|	  |	  |
   integral  floating  character boolean  String
	|	|
  --------	------
  |		|     |
  |		float double
  |		4     8
  |
  byte  1 = 8 bits = 256 possibilities
  short 2 = 16 bits = ...
  int   4 = 32 bits = ..
  long  8 = 64 bits = ...


	byte rollNumber = 10 <-- it occupies only 1 byte

	and in 1 byte to can store a range of

		-128 to 127 
		-    to +
	smallest	largest
	







	byte = how many bits = 8 bits


	1 bit = binary digit

	1 bit can be either off or on
			    0   or 1


	1 bit =		0
			1

	2 bits	= 	0 0 
			0 1
			1 0
			1 1

	2 friends = 	0 0
			1 0
			0 1
			1 1

	3 friends =	0 0 0		1 
			0 0 1		2
			0 1 0		3
			0 1 1		4
			1 0 0		5
			1 1 0		6
			1 0 1		7
			1 1 1 		8

	8 friends	= 256 possibilities

	


		
	because of the space they occupy!!!


	byte occupies 1 byte
	short = 2 bytes

	int = 4 

	long = 8


	long nurseryRollNumber = 50;
	|
	why to spend 8 bytes if this is always max as 50

	

---------------------------


A function
	
	void functionName()
	{
		code here
		to perform		
		some job
	}

Four types of functions

1. function without argument and without return value

	void someThingToBeDone() 
	{

	}

2. function with arguments and without return value

	void multiplyThem(int a, int b)
	{
		int c = a * b;
		System.out.println("product is :"+c);
	}
3. function with arguments and with return value

	float divideThem(int a, int b)
	{
		float c = a / b;
		return c;
	}

4. function without argument but with return value

	float divideThem()
	{
		float c = 100/5;
		return c;
	}
	



Day 3
------

ClassName - every word's first letter to be capitalized
                e.g.,
                Player, BankAccount, DriverManager
                
    methodName - except the first word, all the successive
                 word's initial letter to be capitalized
                 
                 playerShoeSize(), setLookAndFeel()
                 openMyBankAccount(), clearTheScreen() 

    variable name - rule is same as of methodName
                
                rollNumber, accountNumber
                socialSecurityNumber


			who
			| ? employee/student/both | JAVA DEVELOPER
		----------------
		|		|
		where[PLACE]	when [ TIME ]
		|USA		|Jan/2023 Feb/Mar/Apr/....24 25 26 27...
	---------------------------------
	|		|		|
	why		what		how
	|REASON		| inFORMation	|implementation [ coding ]
	why java class  | info		| APPLY IT
	why data types	| knowledge	| wisdom
	why methods	| know..	| wisdom
	why 4 methods				|
	why				  MNC is interested in the wisdom
	why
	why..
	why..

			"applied knowledge" is the wisdom


	Agenda
	---------
	Integrate the data with functions inside a class






	"non-static"



	if you are a banker...

	- you open a bank today

	- no customers 

	static(sharable) float rateOfInterest = 3.5 




		impossible

		possible

		asynchronous

		you are the sea shore
			|
		----------------------------------------------
		|		|			|
		eating		waching the sun set	holding her hand
	

		








non-static	acno <-- 123	
		acname<--sandeep
		acbal<--5000
			pnr/100

non-static	acno <-- 334
		acname<--ashok
		acbal<---6000

non-static	acno <-- 668





Day 4
---------------------------



you learn anything
you need practice


no	poor	average		better		best
1	2	3		4		5
---->	--->	-->		--->		---->




	thought	+ emotion	= action + result
	|	   |		= apply	 + output
java thoughts	 positive
 ( concepts)	 by practicing
		 more examples
		( resolving 
		  queries )


Why would any company takes us as their part?



	- To solve a problem
	- particular problem

	You have to find these problems
	which you can solve

	and become an expert of it

	so that they would be ready to take you


	by doing so you come into the VISIBILITY

	in the market

	THESE LINES ARE SPIRITUAL LINES


	BECAUSE YOU ARE GOING TO HELP THEM


	FIRST YOU HAVE TO HELP YOURSELF


thoughts + emotions = action + result
|		|	|	 |
HERE	      HERE	typing  you see it on the screen
			here

	class AccountTest
	{
		public static void main(String args)
		{
			Account acObj1 = new Account();
			Account acObj2 = new Account();
			Account acObj3 = new Account();
			Account acObj4 = new Account();
			Account acObj5 = new Account();

			acObj1.setAccount(11,"Jack",5000);
			acObj2.setAccount(22,"Jane",6000);
			acObj3.setAccount(33,"Janet",7000);
			acObj4.setAccount(44,"Julie",8000);
			acObj5.setAccount(55,"Robert",9000);
		
			acObj1.printAccount();
			acObj2.printAccount();
			acObj3.printAccount();
			acObj4.printAccount();
			acObj5.printAccount();
	

		}
	}
	class Account
	{
		private int acno;
		private String holder;
		private float acbal;

		//its setting the data
		//no return		with arguments
		//MUTATOR
		void setAccount(int x, String y, float z)
		{
			acno=x;
			holder=y;
			acbal=z;
		}		

		//NON-MUTATOR
		void printAccount() 
		{
			System.out.println("ac no  is : "+acno);
			System.out.println("holder is : "+holder);
			System.out.println("ac bal is : "+acbal);
		}

		//MUTATOR
		void withdraw(float amtToWithdraw)
		{
		        acbal = acbal - amtToWithdraw;
		}

		//MUTATOR
		void deposit(float amtToDeposit)
		{
		        acbal = acbal + amtToDeposit;
		}
	
	}


Day 5
---------

There are three types of programming constructs

1. sequential based coding
2. Selection based coding
3. Iterative based coding


1. Sequential

	line1
	line2
	line3
	line4
	line5

2. Selection

	A

	line1
		if the condition is satified then it evalutes to true (boolean)
	if(condition) <-- if this condition is satisfied only then line2 would run
		line2
			<-- if the conditin is not satisfied then line2 would be
				skipped
	line3
	line4
	line5

	B
		
		line1

		if(condition)
		{
			int x;
			line2
			line3
			line4
		}

		variable x is not available here 
		line5


	C

		line1

		if(condition)
			line2
		else
			line3

		line4
		line5
	


		if(age>=18)
			System.out.println("you can vote");
		else
			System.out.println("you can not  vote");


	D
		line1

		if(condition)
		{
			line2
			line3
		}
		else
			line4

		line5


	E
		
		line1

		if(condition)
		{
			line2
			line3
		}
		else
		{
			line4
			line5
		}
		line6



		
Operators
-----------

	binary operators
	-----------------
	+	10 + 3 = 13
	-	10 - 3 = 7
	*	10 * 3 = 30
	/	10 / 3 = 3
	%	10 % 3 = 1

	relational operators
	-------------------------
	>  greater than
	>= greater than or equal 
	<  lesser than
	<= lesser than or equal 
	!= not equal 
	=  equal

	unary operator
	----------------

	logical operator
	------------------
		&&	<--- logical and
		!	<--- logical or 



		if( condition1 && condition2 )
		{
			do this job
		}
		else	
		{
			do this another job
		}


		if ( condition1 | condition2 )
		{
			do this
		}
		else
		{
			do that
		}
--------------------------------------

	line0

	if(condition1)
		line1
	else
		if(condition2)
			line2
		else
			line3

	line4

---------------------------------

	OOPS
	
	1. Abstraction
		hiding the complexity of an object
		providing the simplicity of an object via simple
		accessible functions
		eg. User of an ATM executes withdrawCash()

	2. Encapsulation
		coding the complexity of an object
		binding of data and functions togethers
		eg. ATMEngineer develops the coding of withdrawCash()

	3. Polymorphism
		ability of any business entity to have many forms
		a. function overloading
			many dial functions in the Phone class

		b. function overriding
			let the subclass re-define a function which has the same name
			as of the super class's function
		
			class Doctor
			{
				void diagnose() {
					System.out.println("checking ENT");
				}
			}
			class Surgeon extends Doctor
			{
				void diagnose() {
					super.diagnose();
					System.out.println("checking the wound..");
				}
			}

		c. ???
		
	4. Inheritance
		ability of any business entity to acquire properties
		from existing business entities

	5. Object communication


		Inheritance



			Doctor
			  |
			  | diagnose() { ENT check }
			  | prescribe() { RGB pills }
			  | chargeFees() { 100/200 INR / $3 }
		-----------------
		|
		|
	   GeneralSurgeon 
		| diagnose() { ENT check + check wound }
		| prescribe() { rgb bills + blood reports + scans }
		| chargeFees() { 500/800/1500 / $10 }
		| surgery() { }
	-----------------------------------
	|		|		|
	HeartSurgeon	NeuroSurgeon  Orthopedician
	|
	 diagnose() { ENT check + bp + scans + ecg report + sugar rpts }
	 prescribe() { rgb bills + bp reports + scans + less oil + gym + yoga + ....}
         chargeFees() { 3000/5000 / $30 }
	 surgery() { }
	 doHeartSurgery() { }
         doOpenHeartSurgery() { }
	 angioplasty() { }
         angioGraphy() { }





			BankAccount (super/base)
			     | acno,acholder,balance
			     | withdraw(){}
			     | deposit() { }
		----------------------------------------
		|		|		|
	SavingsAccount    CurrentAccount    CreditCardAccount  (sub/derived)
	   interestRate       overdraftLimit      creditLimit
						  cashLimit
	    withdraw(){ }	withdraw(){}    withdraw(){}
	    deposit() { }
	    calcSI(){}







			LivingBeing
			   |breathing()
----------------------------------------------
|	|	|		   |         
Fish	Bird	Tree		 Animal
		|		   | eat(){} sleep(){} reproduce(){}
	----------------	--------------------
	  |	     |		   |		|
	Rose	 Coconut	Mammal		Reptile
				   | giveBirth()     | layEggs(){}	
				-----------------    ---------------
				   |		|	|        |
				 Human		Tiger Crocodile Snake
				   | think(){}
				Person
				 |
				 | personalDevelopment(){}
				 |
			-----------------
			|
			Student
			|  study(){}
			|  doAssignments(){}
			|  read(){}  
			|  write(){}
			|			
		---------------
		|
		Employee
		| doProjectWork(){}
		|
	--------------------
	|
	Executive
	    | executePlans(){}
	    |
	  Manager
		|managePlans(){}
		Director
		   directPlans(){}















































